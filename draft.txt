# 针对带应届生的导师
# 引子     10
# 技术能力  8
# 业务能力  3
# 项目管理  5
# 沟通      5
# 其他      5
#           3

小黄鸭，回答问题的送出

今天的题目是“提高技术应届生的能力”，首先我想问一个问题，大家希望提升同学的能力，让同学变成什么样子呢？

...

我们可以想到很多方面，来描述一个理想的目标，不过比较杂乱，把需求整理一下


我们的期望，可以分成三个层次
成长的目标，就是是工作中直接需要的技能，有技术能力、业务能力、项目和任务管理、沟通表达能力
为了更好学到这些技能，需要同学掌握一些正确的方法，包括学习方法、工作方法、团队合作方法，这些是成长的催化剂
更本质一些，关系到同学的长远发展，希望他能聪明、仔细、敬业，还有热情，有团队精神
所以这些需求是有层次区分的，也是有关联的，那再问大家，做一下选择题，培养同学应该从哪个层次入手？

...


会从提升技能入手，为什么？
因为技能是看得见的，和我们的目标直接相关，提升的效果可以衡量，尤其对于新同学来说这是有很大提升空间的
但方法论、性格和基础素质则不一定，不能够先入为主的认为就应该改变他
应该在帮助新人提升技能的过程中，关注新人是否存在更深层次的问题，必要时传授方法、提升素质，甚至影响性格

今天我主要讲讲提高具体技能的方法，下面两个层次更深更难的内容，我们以后再交流
所以我们就看看提升技能该怎么做



最重要的一点，就是要先找对目标，有的放矢
要有明确的目标，这里说的目标不能是宽泛的“提高技术”、“提高业务理解”，而是具体的什么技术不足，什么知识理解不深，需要补强，这样接下来才明确怎么做

接下来导师要做的，不是去要结果，导师能控制的是做好“过程”
制定合适的过程，过程定的好，结果也就自然容易达到
就像图片里这样，射箭不外乎把每个动作做好，每个动作都到位了，命中并不难


请会开车的同学举一下手？
...
其实我想问的是没举手的同学，有没有有驾照的？
为什么你不认为自己会开车
回想一下学开车的过程
首先有教练教，然后自己看书、上车学习
之后上路，自己买车开，做完这一步我们才完成了从学到用的过程，很多人正是因为没有真正自己动手做过，所以不敢说自己会
那学习还能不能达到更高的层次？
没有人会怀疑教练不会开车吧？如果你通过实践，总结出了方法，又教给了别人，那就是高手了


所以总结一下，一个好的过程，就是导师带着同学依次走过，教 学 用 说 的过程


不过这些道理大家都懂，所以我就讲讲实操经验



技术应届生，先讲讲提高技术
还是从目标开始
首先达成共识：告诉为什么要提高，提高什么技术，什么时候到什么程度
导师有时候会说，新同学这也不会那也不会，其实这很正常，师门不同，经历不同，不能想当然认为你以前会的新同学应该会
菜鸟阶段，要重点关注基础能力，尤其对大家近乎于常识的东西，要及早扫除盲点，不要在工组中栽跟头
一些常见的例子，代码质量，什么是好的代码，linux shell命令掌握程度，MySQL的一些常见知识点，Java或者工作需要的语言的基础知识，等等
有时候我们还会说同学调试能力不够，或者设计模块做得乱七八糟，那调试、设计能力，是好的目标吗？
对于应届生来说，这样的目标不够直接，导师需要拆解的更细，调试、设计能力的不足，是因为哪些能力还不足，把具体的能力作为目标，这样拆分的更细
所以要在你带的新人身上，找到哪些方面要提高，精确到知识点


到具体过程，第一件事情就是教
不过首先导师要同步目标，为什么要提升，提升什么，什么时候提升到什么程度
传授知识要持续、及时，随时随地，刚开始有什么不懂随时讲，所有code导师要仔细看，不好的不对的指出来，而且不只是哪里不好，还要告诉为什么不好
教的过程就不具体说了， 平时要注意观察案例，了解新人会的和不会的知识点，后面制定计划


教是在引导新人起步，导师不可能事事都教，那也不是好的方式
更主要还是自己学习，所以要多鼓励，而且不是放手不管，而是有监督的学习，告诉要学什么
最重要的就是针对性，针对一个个不足的知识点，告诉新人要看什么，找到最合适的精选的内容，这是导师很重要的作用
列举一些常用的，为了提高代码质量，要求看《代码整洁之道》，Java基础不牢的，看《Effective Java》，进阶一些要求读《Guava Explained》文档
总之意思就是哪里不足，就找到最对应的资料学习，量不要太大，导师要关注学习进度
也要注意方法的多样性，比如参加相关分享，阅读开源代码，直接向其他牛人学习等等


然后把知识用到工作中，这是从过程到结果很重要的步骤
新人很容易抱怨，学的东西用不上，导致积极性降低，导师要避免这种情况，一方面创造机会使用，另一方面直接要求
学的vim也好，java技巧也好，要求用在编码中，参与code review，以前是导师找问题，现在要用学到的代码标准，挑别人的错误和问题，能提出意见，才说明真的学到了
怎么算是把某个知识用好了，导师想一想如何界定和要求，让同学做出来给你看



再进一步，巩固学到的知识，有一句话很合适“最好的成长是分享”
一般同学不会主动表达，导师就要要求和创造机会，比如面聊，当面问他对知识点的理解
要求写学习笔记，或者记录下来用到了哪些案例，分享给其他同学
再就是技术分享
总之就是推着同学升华理解

这里举个例子，在风控组中，大家会一起来收集提高代码质量的例子，全都来自真实的code，大家一起写，创造一个平台让大家有意识的使用、分享知识



接下来讲讲业务能力提高
大家想一下业务能力提高的目标是什么？
这里我分成了几个层次
首先是了解，知道我们在做什么事
然后是知道难点在哪、各方向异同，为什么这样设计
最终目标是让同学精通一个项目，理解需求，自主设计满足要求


同样，没人是天生就会，导师要教
教的初步阶段，尤其是新人刚来，讲重点、精炼，不要太多细节，目的是激发兴趣
联系实际，我们美团是和生活息息相关的服务，有很多例子可以分享，了解意义
更细节的介绍，项目是如何一步步发展过来的
总之该教的要分步骤逐步说到位

安排学习
有针对性的内容，文档、书籍、代码
尤其重要的，要保持业务敏感性，听周会、看周报
是否知道PM、运营、客服的工作是什么


用和说在一起，都是实践
同样可以用的方法，面聊，当面问
让他解答简单的业务问题，回复客诉
还有有人上面会说，我们没有文档可以给他学习，这是多好的机会，你教给他，让他写成文档，做业务分享串讲等
其实学习业务，就是勤快，让他知道要提高业务能力


项目管理提高
大家看到同学项目管理的问题有哪些？
对于任务：不遗漏，时间预期比较准确，有轻重缓急
项目：有计划、进度透明，外部可以干预，可以变通，目标明确，讲SMART


怎么做？这里不从教开始了
先是看，直接上手做，刚开始不要给太大的任务，不要太多，留出犯错空间
看什么？有没有计划，时间预期合理吗，优先级对吗，进度是否透明


看到了问题，才好下手
教一定要细致，而且持续，保持关注
有日同步，每天问一下今天做什么，昨天怎么样，周总结
用实例教方法，怎么预估事件，优先级，怎么做计划，处理并发任务
大家听说过 PDCA吗，讲给他听


用，写在日报、周报中
有项目季度计划，哪怕不是项目负责人也可以帮助完善，或者在计划中做好自己那部分
计划中的一些要求点，目标SMART，任务划分粒度是否合理，进度展示了吗，别人看不看得懂


关于日报、周报的例子


沟通表达提高
这点比较抽象，我们的目标有
沟通：理解需求、讨论有效
表达：清晰准确


学，无处不在，让他读文档，问他读懂了吗，文档有没有写的不好的地方
听讨论、分享、周会，问听到了什么？复述一下，菜鸟好像听懂了，但说不出来，没关系，每次都问，反复说

用，随时随地，可以有几个步骤
先让做一些简单的事情，写文档，写会议纪要，写计划
做得怎么样呢，不仅是导师看，还可以让他自己学会评价，让他把文档给小黄鸭看，或者说讲给家人听
然后给更多的实战机会
组织TB，主持周会
讲座分享、沟通需求、主持讨论、推进等
每次做完导师都要评价一下，教教方法

例子：女生，刚开始讨论躲着听，不是很专心，问起来其实听懂了，但不愿意说
方法：给机会、给责任，tech show


给一些素材可以用
写文档的
TED
Yixi


其他，我想总结一下导师在以上过程中的作用到底是什么
其实就是搭建平台，把过程制度化，再填进我们需要要求的东西
其他要注意的，成就感
信任关系


对导师的建议
广涉猎
勤总结
谦学习





