# 针对带应届生的导师

如果说培养应届生是一个项目，设想一下，目标是什么？我们想要什么样的培养结果？


可以想到很多方面，来描述一个理想的培养结果，但如果需求是这样，还比较杂乱，把需求整理一下


我们的希望，可以分成三个层次
成长的目标，应该说是工作中直接需要的技能，有技术能力、业务能力、项目和任务管理、沟通表达能力
为了更好学到这些技能，我们还希望同学掌握一些正确的方法，包括学习方法、工作方法、团队合作方法，这些是成长的催化剂
更本质一些，关系到同学的长远发展，希望他能聪明、仔细、敬业，还有热情，有团队精神
所以这些需求是有层次区分的，也是有关联的，那培养该从哪里入手呢？



我会从提升技能入手，为什么？因为技能是看得见的，和我们的目标直接相关，提升的效果可以衡量，更重要的是，尤其对于新同学来说这是有很大提升空间的，而方法论、性格和基础素质则不一定，不能够先入为主的认为就应该改变他
应该在帮助新人提升技能的过程中，关注新人是否存在更深层次的问题，必要时传授方法、提升素质，甚至影响性格
那提升技能该怎么做呢



首先，找对目标，有的放矢
要有明确的目标，这里说的目标不能是宽泛的“提高技术”、“提高业务理解”，而是具体的什么技术不足，什么知识理解不深，需要补强，这样接下来才明确怎么做

接下来导师就要针对这个明确的目标，制定合适的过程，过程定的好，结果也就自然容易达到
就像图片里这样，射箭不外乎把每个动作做好，每个动作都到位了，命中并不难

上面这些还比较抽象，接下来就按具体的实例介绍



培养技术应届生，首先讲讲怎么提高技术，技术范畴很广，我们还是从找目标开始
导师有时候会说，新同学这也不会那也不会，其实这很正常，师门不同，经历不同，不能想当然认为你以前会的新同学应该会
菜鸟阶段，要重点关注基础能力，尤其对大家近乎于常识的东西，要及早扫除盲点，不要在工组中栽跟头
举一些例子，常见的基础技术能力
- 怎么写优美的代码，代码质量关注哪些东西
- vim，linux, 基本的shell命令
- java或者所使用语言的基础知识，精确到一类类的知识点，。。。
- MySQL，基本安装、命令，字段属性，性能调优等
还有说要提高调试、设计能力，这合适吗？对于应届生来说，这样的目标还不够直接，导师需要拆解的更细，调试、设计能力的不足，是因为哪些能力还不足，把具体的能力作为目标，这样拆分的更细
所以要在你带的新人身上，找到哪些方面要提高，精确到知识点

接下来要提升某方面，你会怎么做呢？看书？做事？
以前有过哪些尝试？效果怎么样？同学有什么反馈？

怎么教，怎么设定成长的过程，就是接下来的重点了
大家可以回想一下自己学一项技能的过程，编程、开车、或者做饭，有哪几个阶段？到什么时候你觉得自己掌握了？
通常开始要有人给讲讲对吗？
然后自己要学习，吸收一些知识
然后上手锻炼，反复用，反复更正，用得好了，得心应手了，基本上就会了
还有个更高的程度，当你能总结出经验，讲给别人听，甚至再教会别人，那就是大牛了

所以总结一下，学习的过程有这几个阶段
教 学 用 说
走好这个过程，提升就很自然

教，第一件事其实还不是教，而是同步目标，为什么要提升，提升什么，什么时候提升到什么程度
教要持续、及时，传授知识随时随地，刚开始有什么不懂随时讲，所有code导师要仔细看，不好的不对的指出来，而且不只是哪里不好，还要告诉为什么不好，教的过程就不具体说了，平时要注意观察案例，了解新人会的和不会的知识点，后面制定计划

教是在引导新人起步，接下来让他自己学，这是让他自己做，所以要多鼓励，而且不是放手不管，而是有监督的学习，告诉要学什么
最重要的就是针对性，针对一个个不足的知识点，告诉新人要看什么，找到最合适的精选的内容，这是导师很重要的作用
列举一些常用的，为了提高代码质量，要求看《代码整洁之道》，Java基础不牢的，看《Effective Java》，进阶一些要求读《Guava Explained》文档
总之意思就是哪里不足，就找到最对应的资料学习，量不要太大，导师要关注学习进度
也要注意方法的多样性，比如参加相关分享，阅读开源代码，直接向其他牛人学习等等

然后把知识用到工作中，这是从过程到结果很重要的步骤，新人很容易抱怨，学的东西用不上，导致积极性降低，导师要避免这种情况，一方面创造机会使用，另一方面直接要求，学的vim也好，java技巧也好，要求用在编码中，参与code review，以前是导师找问题，现在要用学到的代码标准，挑别人的错误和问题，能提出意见，才说明真的学到了
怎么算是把某个知识用好了，导师想一想如何界定和要求

再进一步，巩固学到的知识，有一句话很合适“最好的成长是分享”




